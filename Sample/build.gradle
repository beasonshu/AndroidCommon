/*
 * Copyright (C) 2015  Haiyang Yu Android Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
// 生成版本的时间
def releaseTime() {
    return new Date().format("yyyy_MMdd")
}

// APP的VersionCode
def generateVersionCode() {
    return new Date().format("yyyyMMddHH")
}

def renameAPK(variant, output) {
    def flavor = variant.productFlavors[0];
    def flavorName;
    def versionName;


    File unaligned = output.packageApplication.outputFile;
    File aligned = output.outputFile
    if (!unaligned.getName().equalsIgnoreCase(aligned.getName())) {
        println "deleting " + unaligned.getName()
        unaligned.delete()
    }

    if (flavor == null) {
        flavorName = ""
        versionName = android.defaultConfig.versionName
    } else {
        versionName = flavor.versionName
        flavorName = flavor.name
    }

    def versionNameSuffix = variant.buildType.versionNameSuffix
    if (versionNameSuffix.toString().equals("null")) {
        versionNameSuffix = ""
    }

    def buildTypeName = variant.buildType.name;

    if (buildTypeName.equals("debug")) {
        buildTypeName = "dev"
    } else if (buildTypeName.equals("release")) {
        buildTypeName = "prod"
    }


    def outputFile = output.outputFile

    if (outputFile != null) {
        def newName;
        if (flavorName.equals("") || flavorName.equals("null")) {
            newName = "${APK_PREFIX}_${buildTypeName}_v${versionName}${versionNameSuffix}_${releaseTime()}.apk"
        } else {
            newName = "${APK_PREFIX}_${buildTypeName}_${flavorName}_v${versionName}${versionNameSuffix}_${releaseTime()}.apk"
        }
        output.outputFile = new File(outputFile.parent, newName)
    }
}

def deleteUnaligned(output) {
    File unaligned = output.packageApplication.outputFile;
    File aligned = output.outputFile
    if (!unaligned.getName().equalsIgnoreCase(aligned.getName())) {
        println "deleting " + unaligned.getName()
        unaligned.delete()
    }
}

android {
    compileSdkVersion COMPILE_SDK_VERSION as int
    buildToolsVersion BUILD_TOOLS_VERSION

    defaultConfig {
        // 注意这里只是设置了appid的前缀 在buildTypes里面有设置后缀
        applicationId APPLICATION_ID
        minSdkVersion MIN_SDK_VERSION as int
        targetSdkVersion TARGET_SDK_VERSION as int
        versionCode generateVersionCode() as int
        versionName VERSION_NAME

        // 配置 含有的版本类型
        buildConfigField "int", "VERSION_DEV", VERSION_DEV
        buildConfigField "int", "VERSION_SIT", VERSION_SIT
        buildConfigField "int", "VERSION_UAT", VERSION_UAT
        buildConfigField "int", "VERSION_PROD", VERSION_PROD
        // 配置默认版本-为开发版本
        buildConfigField "int", "VERSION_TYPE", VERSION_DEV

        // 配置语言信息
        resConfig "zh"
    }

    //签名
    signingConfigs {
        release {
            storeFile file(RELEASE_STOREFILE)
            storePassword RELEASE_STORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
        }
    }

    productFlavors {
        // TODO
    }

    buildTypes {

        debug {
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            versionNameSuffix DEV_VERSION_NAME

            applicationIdSuffix DEV_APPLICATION_ID_SUFFIX
            // AndroidManifest 中配置的文件
            manifestPlaceholders = [
                    // App的名字
                    APP_NAME                : DEV_APP_NAME,
                    // App的ICON
                    APP_ICON                : DEV_APP_ICON,
                    // 百度统计的ID
                    BAIDU_STATISTICS_ID     : DEV_BAIDU_STATISTICS_ID,
                    // 百度统计的渠道描述
                    BAIDU_STATISTICS_CHANNEL: DEV_BAIDU_STATISTICS_CHANNEL
            ]

            // 设置那个版本
            buildConfigField "int", "VERSION_TYPE", VERSION_DEV

            //将release版本的包名重命名，加上版本及日期
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    renameAPK(variant, output);
                }
            }

            // delete unaligned files
            android.applicationVariants.all { variant ->
                variant.assemble.doLast {
                    variant.outputs.each { output ->
                        deleteUnaligned(output);
                    }
                }
            }
        }


        sit {
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            versionNameSuffix SIT_VERSION_NAME

            applicationIdSuffix SIT_APPLICATION_ID_SUFFIX
            // AndroidManifest 中配置的文件
            manifestPlaceholders = [
                    // App的名字
                    APP_NAME                : SIT_APP_NAME,
                    // App的ICON
                    APP_ICON                : SIT_APP_ICON,
                    // 百度统计的ID
                    BAIDU_STATISTICS_ID     : SIT_BAIDU_STATISTICS_ID,
                    // 百度统计的渠道描述
                    BAIDU_STATISTICS_CHANNEL: SIT_BAIDU_STATISTICS_CHANNEL
            ]

            // 设置那个版本
            buildConfigField "int", "VERSION_TYPE", VERSION_SIT

            //将release版本的包名重命名，加上版本及日期
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    renameAPK(variant, output);
                }
            }

            // delete unaligned files
            android.applicationVariants.all { variant ->
                variant.assemble.doLast {
                    variant.outputs.each { output ->
                        deleteUnaligned(output);
                    }
                }
            }
        }


        uat {
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            versionNameSuffix UAT_VERSION_NAME

            applicationIdSuffix UAT_APPLICATION_ID_SUFFIX
            // AndroidManifest 中配置的文件
            manifestPlaceholders = [
                    // App的名字
                    APP_NAME                : UAT_APP_NAME,
                    // App的ICON
                    APP_ICON                : UAT_APP_ICON,
                    // 百度统计的ID
                    BAIDU_STATISTICS_ID     : UAT_BAIDU_STATISTICS_ID,
                    // 百度统计的渠道描述
                    BAIDU_STATISTICS_CHANNEL: UAT_BAIDU_STATISTICS_CHANNEL
            ]

            // 设置那个版本
            buildConfigField "int", "VERSION_TYPE", VERSION_UAT

            //将release版本的包名重命名，加上版本及日期
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    renameAPK(variant, output);
                }
            }

            // delete unaligned files
            android.applicationVariants.all { variant ->
                variant.assemble.doLast {
                    variant.outputs.each { output ->
                        deleteUnaligned(output);
                    }
                }
            }
        }

        release {
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            versionNameSuffix PROD_VERSION_NAME

            applicationIdSuffix PROD_APPLICATION_ID_SUFFIX

            // AndroidManifest 中配置的文件
            manifestPlaceholders = [
                    // App的名字
                    APP_NAME                : PROD_APP_NAME,
                    // App的ICON
                    APP_ICON                : PROD_APP_ICON,
                    // 百度统计的ID
                    BAIDU_STATISTICS_ID     : PROD_BAIDU_STATISTICS_ID,
                    // 百度统计的渠道描述
                    BAIDU_STATISTICS_CHANNEL: PROD_BAIDU_STATISTICS_CHANNEL
            ]

            // 设置那个版本
            buildConfigField "int", "VERSION_TYPE", VERSION_PROD

            //将release版本的包名重命名，加上版本及日期
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    renameAPK(variant, output);
                }
            }

            // delete unaligned files
            android.applicationVariants.all { variant ->
                variant.assemble.doLast {
                    variant.outputs.each { output ->
                        deleteUnaligned(output);
                    }
                }
            }
        }
    }


    dexOptions {
        jumboMode true
    }
    sourceSets {
        main {
            assets.srcDirs = ['src/main/assets']
            jniLibs.srcDirs = ['libs']
        }
        // Move the tests to tests/java, tests/res, etc...
        //  instrumentTest.setRoot('tests')
        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
        packagingOptions {
            exclude 'META-INF/DEPENDENCIES.txt'
            exclude 'META-INF/LICENSE.txt'
            exclude 'META-INF/NOTICE.txt'
            exclude 'META-INF/NOTICE'
            exclude 'META-INF/LICENSE'
            exclude 'META-INF/DEPENDENCIES'
            exclude 'META-INF/notice.txt'
            exclude 'META-INF/license.txt'
            exclude 'META-INF/dependencies.txt'
            exclude 'META-INF/LGPL2.1'
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        // if true, only report errors
        ignoreWarnings true
    }
}




dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    // 基础库
    compile project(':BrightCommon')
}

